version: '3'

# from https://www.dabbleofdevops.com/blog/setup-a-mysql-python-docker-dev-stack
# docker-compose build; docker-compose up -d

services:

  db:
    image: mysql:5.7
    restart: always
    environment:   # Set up mysql database name and password
      MYSQL_ROOT_PASSWORD: bustime
      MYSQL_DATABASE: buses
      MYSQL_USER: nycbuswatcher
      MYSQL_PASSWORD: bustime
      TZ: America/New_York
    ports:
      - 6033:3306 # n.b this is only for external connections
    volumes:
      - bus_database:/var/lib/mysql

  grabber:
    restart: always
    build:
      context: .
      dockerfile: ./build/grabber/Dockerfile
    depends_on:
      - db
    volumes:
      - bus_files:/app/data
      - bus_static:/app/api/static
    command:
      # tail -f /dev/null
      /opt/conda/envs/nycbuswatcher/bin/python3 /app/grabber.py

#future will need to route this through the nginx proxy
  api:
    restart: always
    build:
      context: ./build/api/Dockerfile
    volumes:
      - bus_static:/app/api/static
# # uncomment to make the API publicly available
#    ports:
#      - "8001:80"
    command: uvicorm --host=0.0.0.0 --port=80 api:app
    # Infinite loop, to keep it alive, for debugging
    # command: bash -c "while true; do echo 'sleeping...' && sleep 10; done"

  # after https://github.com/sladkovm/docker-flask-gunicorn-nginx
  dash_app:
    restart: always
    build:
      context: .
    volumes:
      - bus_assets:/app/assets # <---------------------------------------------------------------------------------
    ports:
      - "8000:8000" # <---------------------------------------------------------------------------------
    command: gunicorn --workers=5 --threads=1 -b 0.0.0.0:8000 app:server
    # Infinite loop, to keep it alive, for debugging
    # command: bash -c "while true; do echo 'sleeping...' && sleep 10; done"

# future for production add the proxy?
#  # after https://github.com/sladkovm/docker-flask-gunicorn-nginx
#  nginx:
#    container_name: nginx
#    restart: always
#    build: ./nginx
#    ports:
#      - "80:80"
#    depends_on:
#      - dash_app

volumes:
  bus_database:
  bus_files:
  bus_static:
  bus_assets: